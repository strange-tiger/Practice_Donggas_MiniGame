# 싱글톤 패턴이란?
- 오직 한 개의 인스턴스만을 갖도록 보장하고, 이에 대한 전역적인 접근점을 제공하는 패턴

## 장단점은 무엇이 있는가?
- 장점
    - 인스턴스의 유일성을 보장한다. 이를 컴파일 단계에서 강제한다.

    - 사용하지 않는다면 생성되지 않고 또한 런타임에서 초기화 된다.

    - 어디서든 쉽게 접근할 수 있다.

    - 전역 네임 스페이스 대신 클래스 네임 스페이스를 사용해 네임 스페이스를 더럽히지 않고 좁힌다.

- 단점
    - 결국 전역 변수라 코드 간 결합도를 높이고, 유지보수를 어렵게 한다.

    - 초기화에 오랜 시간이 걸리고, 초기화 시점이 제어가 안되어 메모리 단편화 방지를 위한 메모리 풀링 사용이 불가하다.

    - 인스턴스의 유일성과 전역적 접근점을 동시에 가지려 하여, 둘 중 하나의 기능만 필요한 경우 사용이 곤란하다.

# 오브젝트 풀링이란?
- 메모리 단편화 및 잦은 가비지 컬렉션을 막기 위해 반복적으로 사용할 오브젝트를 담아둘 공간(풀)에 오브젝트를 담아두고 필요할 때마다 풀에서 꺼내어 사용하는 방식.

- 이를 통해 자주 사용하는 오브젝트의 반복적인 생성, 파괴를 피하고 이에 따라 일어나는 메모리 단편화와 가비지 컬렉션을 막는다.

## 어떤 장점이 있는지 메모리 단편화와 연관지어서 설명하시오
- 오브젝트의 생성과 파괴가 자주 일어나지 않기에, 이에 따른 메모리의 할당, 해제가 줄게 되고 그만큼 가비지 컬렉션이 일어나지 않아 연산이 줄어든다.

- 가비지 컬렉션이 없더라도, 그만큼 메모리 할당과 해제가 줄어들기에 공간은 남아도 중간중간 끊어지게 되어 연속적인 공간은 부족하게 되는 메모리 단편화를 방지할 수 있다.

- 새로 생성하고 메모리를 할당하는 작업이 연산이 많이 들기에, 미리 생성하고 오브젝트 풀에서 꺼내는 작업이 연산이 덜 들어 더 빠르게 수행할 수 있다.

# 참조
- [싱글톤 패턴(Singleton Pattern)](https://haedallog.tistory.com/184)
- [GoF의 디자인 패턴](http://www.yes24.com/Product/Goods/17525598)
- [Implementing the Singleton Pattern in C#](https://csharpindepth.com/articles/singleton)
- [Wikipedia : Object pool pattern](https://en.wikipedia.org/wiki/Object_pool_pattern)
- [Object Pool Pattern (오브젝트 풀 패턴) 의 이해](https://creatordev.tistory.com/73)